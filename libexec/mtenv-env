#!/usr/bin/env bash

set -e
[ -n "$MTENV_DEBUG" ] && set -x

env_Verify()
{
	[ -z "$MTENV_V" ] || exec mtenv help env
}

env_Ldconfig()
{
	if [ ! -e /etc/ld.so.conf.d/mtenv_lib.conf ]; then
		if [ ! $(grep -l '/lib'    '/etc/ld.so.conf') ]; then
			echo "/lib" >> /etc/ld.so.conf.d/mtenv_lib.conf
		fi

		if [ ! $(grep -l '/usr/lib'    '/etc/ld.so.conf') ]; then
			echo "/usr/lib" >> /etc/ld.so.conf.d/mtenv_lib.conf
		fi

		if [ ! $(grep -l '/usr/local/lib'    '/etc/ld.so.conf') ]; then
			echo "/usr/local/lib" >> /etc/ld.so.conf.d/mtenv_lib.conf
		fi
	fi

	rm -f /etc/ld.so.conf.d/mysql*.conf || true

	ldconfig
}

env_AutoconfInstall()
{
	Downloadfile lib-web/autoconf/${autoconf_dir}.tar.gz
	./configure --prefix=/usr/local/${autoconf_dir}
	make
	make install
}

env_LibiconvInstall()
{
	Downloadfile lib-web/libiconv/${libiconv_dir}.tar.gz
	patch srclib/stdio.in.h ${MEXTRA_PATH}/${libiconv_dir}.patch
	./configure
	make
	make install
}

env_LibmcryptInstall()
{
	Downloadfile lib-web/libmcrypt/${libmcrypt_dir}.tar.gz
	./configure --disable-posix-threads
	make
	make install
	ldconfig
	cd libltdl/
	./configure --enable-ltdl-install
	make
	make install

	ln -s /usr/local/lib/libmcrypt.la /usr/lib/libmcrypt.la
	ln -s /usr/local/lib/libmcrypt.so /usr/lib/libmcrypt.so
	ln -s /usr/local/lib/libmcrypt.so.4 /usr/lib/libmcrypt.so.4
	ln -s /usr/local/lib/libmcrypt.so.4.4.8 /usr/lib/libmcrypt.so.4.4.8
	ln -s /usr/local/bin/libmcrypt-config /usr/bin/libmcrypt-config

	ldconfig
}

env_MhashInstall()
{
	Downloadfile lib-web/mhash/${mhash_dir}.tar.gz
	./configure
	make
	make install

	ln -s /usr/local/lib/libmhash.a /usr/lib/libmhash.a
	ln -s /usr/local/lib/libmhash.la /usr/lib/libmhash.la
	ln -s /usr/local/lib/libmhash.so /usr/lib/libmhash.so
	ln -s /usr/local/lib/libmhash.so.2 /usr/lib/libmhash.so.2
	ln -s /usr/local/lib/libmhash.so.2.0.1 /usr/lib/libmhash.so.2.0.1

	ldconfig
}

env_McryptInstall()
{
	Downloadfile lib-web/mcrypt/${mcrypt_dir}.tar.gz
	./configure
	make
	make install
}

env_ZlibInstall()
{
	Downloadfile lib-web/zlib/${zlibs_dir}.tar.gz
	./configure
	make CFLAGS=-fpic
	make install
}

env_PcreInstall()
{
	Downloadfile lib-web/pcre/${pcre_dir}.tar.gz
	./configure --enable-utf8 --enable-unicode-properties #--disable-shared
	make
	make install

	if [ "$machine" = "x86_64" ] ; then
		mkdir -p /usr/lib64
		rm -f /lib64/libpcre.so*
		rm -f /lib64/libz.so*
		rm -f /usr/lib64/libz.so*
		ln -sf /usr/local/lib/libpcre.so.1.2.3 /lib64/libpcre.so.0
		ln -sf /usr/local/lib/libpcre.so.1.2.3 /lib64/libpcre.so.1
		ln -sf /usr/local/lib/libz.so.1.2.8 /lib64/libz.so
		ln -sf /usr/local/lib/libz.so.1.2.8 /lib64/libz.so.1
		ln -sf /usr/local/lib/libz.so.1.2.8 /usr/lib64/libz.so
		ln -sf /usr/local/lib/libz.so.1.2.8 /usr/lib64/libz.so.1
		ln -sf /usr/local/lib/libz.so.1.2.8 /lib64/libz.so.1
		ln -sf /usr/lib64/libpng.* /usr/lib/
		ln -sf /usr/lib64/libjpeg.* /usr/lib/
	else
		rm -f /lib/libpcre.so*
		rm -f /lib/libz.so*
		rm -f /usr/lib64/libz.so*
		ln -sf /usr/local/lib/libpcre.so.1.2.3 /lib/libpcre.so.0
		ln -sf /usr/local/lib/libpcre.so.1.2.3 /lib/libpcre.so.1
		ln -sf /usr/local/lib/libz.so.1.2.8 /lib/libz.so
		ln -sf /usr/local/lib/libz.so.1.2.8 /lib/libz.so.1
		ln -sf /usr/local/lib/libz.so.1.2.8 /usr/lib/libz.so
		ln -sf /usr/local/lib/libz.so.1.2.8 /usr/lib/libz.so.1
		ln -sf /usr/local/lib/libz.so.1.2.8 /lib/libz.so.1
	fi
	ldconfig
}

env_OpensslInstall()
{
	# http://www.linuxfromscratch.org/blfs/view/svn/postlfs/openssl.html
	Downloadfile lib-web/openssl/${openssl_dir}.tar.gz
	patch -Np1 -i ${MEXTRA_PATH}/${openssl_dir}-${openssl_patch}.patch
	./config shared zlib-dynamic
	make
	make MANDIR=/usr/share/man MANSUFFIX=ssl install
	install -dv -m755 /usr/share/doc/${openssl_dir}
	cp -vfr doc/*     /usr/share/doc/${openssl_dir}
	set +e
	mv -f /usr/bin/openssl /usr/bin/openssl.old
	mv -f /usr/include/openssl /usr/include/openssl.old
	ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
	ln -s /usr/local/ssl/include/openssl /usr/include/openssl
	echo "/usr/local/ssl/lib" >> /etc/ld.so.conf.d/openssl.conf

	if [ "$machine" = "x86_64" ] ; then
		mkdir -p /usr/lib64
		rm -f /usr/lib64/libssl.so*
		rm -f /usr/lib64/libcrypto.so*
		ln -sf /usr/local/ssl/lib/libssl.so.1.0.0 /usr/lib64/libssl.so
		ln -sf /usr/local/ssl/lib/libssl.so.1.0.0 /usr/lib64/libssl.so.10
		ln -sf /usr/local/ssl/lib/libssl.so.1.0.0 /usr/lib64/libssl.so.1.0.0
		ln -sf /usr/local/ssl/lib/libcrypto.so.1.0.0 /usr/lib64/libcrypto.so
		ln -sf /usr/local/ssl/lib/libcrypto.so.1.0.0 /usr/lib64/libcrypto.so.10
		ln -sf /usr/local/ssl/lib/libcrypto.so.1.0.0 /usr/lib64/libcrypto.so.1.0.0
	else
		rm -f /usr/lib/libssl.so*
		rm -f /usr/lib/libcrypto.so*
		ln -sf /usr/local/ssl/lib/libssl.so.1.0.0 /usr/lib/libssl.so
		ln -sf /usr/local/ssl/lib/libssl.so.1.0.0 /usr/lib/libssl.so.10
		ln -sf /usr/local/ssl/lib/libssl.so.1.0.0 /usr/lib/libssl.so.1.0.0
		ln -sf /usr/local/ssl/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so
		ln -sf /usr/local/ssl/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.10
		ln -sf /usr/local/ssl/lib/libcrypto.so.1.0.0 /usr/lib/libcrypto.so.1.0.0
	fi
	set -e
	ldconfig
}

# The "no version information available" means that the library version number is lower on the shared object. 
env_WgetInstall()
{
	Downloadfile lib-web/wget/${wget_dir}.tar.gz
	./configure --prefix=/usr --sysconfdir=/etc --with-ssl=openssl
	make
	make install
}

env_CurlInstall()
{
	Downloadfile lib-web/curl/${curl_dir}.tar.gz
	./configure --prefix=/usr --disable-static --enable-threaded-resolver --with-ssl=/usr/local/ssl
	# --disable-ipv6
	make
	make install
	find docs \( -name "Makefile*" -o -name "*.1" -o -name "*.3" \) -exec rm {} \;
	install -v -d -m755 /usr/share/doc/${curl_dir}
	cp -v -R docs/*     /usr/share/doc/${curl_dir}
}

env_OpensshInstall()
{
	userdel sshd || true
	groupdel sshd || true
	install -v -m700 -d /var/lib/sshd
	chown -v root:sys /var/lib/sshd
	groupadd sshd
	useradd -c 'sshd PrivSep' -g sshd -s /sbin/nologin sshd
	Downloadfile lib-web/openssh/${openssh_dir}.tar.gz
	./configure --prefix=/usr --sysconfdir=/etc/ssh --with-md5-passwords --with-privsep-path=/var/lib/sshd --with-pam --with-kerberos5=/usr
	make
	make install
	install -v -m755 contrib/ssh-copy-id /usr/bin
	install -v -m644 contrib/ssh-copy-id.1 /usr/share/man/man1
	install -v -m755 -d /usr/share/doc/${openssh_dir}
	install -v -m644 INSTALL LICENCE OVERVIEW README* /usr/share/doc/${openssh_dir}
}

env_LibjpegInstall()
{
	# http://www.ijg.org/
	Downloadfile lib-web/libjpeg/jpegsrc.v${libjpeg_version}.tar.gz jpeg-${libjpeg_version}
	sed -i -e '/^docdir/     s:$:/libjpeg-turbo-1.3.1:' \
       -e '/^exampledir/ s:$:/libjpeg-turbo-1.3.1:' Makefile.in
	./configure --prefix=/usr/local/jpeg-${libjpeg_version} \
				--mandir=/usr/share/man \
				--disable-static
				#--enable-shared \
				#--enable-static \
	make
	make install
}

env_LibpngInstall()
{
	# http://libmng.com/pub/png/libpng.html
	Downloadfile lib-web/libpng/${libpng_dir}.tar.xz
	rm -f /usr/lib/libz.so
	rm -f /usr/lib64/libz.so
	rm -f /usr/local/lib/libz.so
	rm -f /usr/local/lib64/libz.so
	./configure
	make CFLAGS=-fpic
	make install
}

env_FreetypeInstall()
{
	# http://download.savannah.gnu.org/releases/freetype/
	Downloadfile lib-web/freetype/${freetype_dir}.tar.gz
	./configure --prefix=/usr/local/${freetype_dir}
	make
	make install
	ln -vs /usr/local/${freetype_dir}/include/freetype2/ /usr/local/${freetype_dir}/include/freetype2/freetype
}

env_LibeventInstall()
{
	Downloadfile lib-web/libevent/${libevent_dir}.tar.gz
	./configure
	make
	make install
}

env_MemcachedInstall()
{
	Downloadfile lib-web/memcached/${memcached_dir}.tar.gz
	./configure
	make
	make install
}

env_LibgdInstall()
{
	# http://libgd.bitbucket.org/
	Downloadfile lib-web/libgd/${libgd_dir}.tar.gz
	./configure --with-jpeg=/usr/local/jpeg-${libjpeg_version}/ --with-png=/usr/local/ --with-zlib --with-freetype=/usr/local/${freetype_dir}/
	make
	make install
}

env_ImageMagickInstall()
{
	# http://www.imagemagick.org/download/
	Downloadfile lib-web/ImageMagick/${ImageMagick_dir}.tar.gz
	cp /usr/local/${freetype_dir}/lib/pkgconfig/freetype2.pc /usr/lib/pkgconfig
	./configure CPPFLAGS="-I/usr/local/jpeg-${libjpeg_version}/include -I/usr/local/${freetype_dir}/include -I/usr/local/${freetype_dir}/include/freetype2" LDFLAGS="-L/usr/local/${freetype_dir}/lib -L/usr/local/jpeg-${libjpeg_version}/lib"
	make
	make install
	ldconfig
	#export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"
	ln -vs /usr/local/include/ImageMagick-6/wand /usr/local/include/wand
	ln -vs /usr/local/include/ImageMagick-6/magick /usr/local/include/magick
}

env_PythonInstall()
{
	Downloadfile lib-web/python/${Python_dir}.tgz
	./configure
	make
	make install
}

env_AsciidocInstall()
{
	Downloadfile lib-web/asciidoc/${asciidoc_dir}.zip
	./configure
	make install
}

env_GitInstall()
{
	local git_path="$(command -v git || true)"
	if [ -z "$git_path" ]; then
		# 下面是Git之类的，一般用户并不需要，当然使用Nodechat模块的用户必须安装
		Downloadfile lib-web/git/${git_dir}.tar.gz
		make configure
		./configure --prefix=/mtimer/git
		make all #doc
		make install

		export PATH=$PATH:/mtimer/git/bin
	fi
}

env_GeoipInstall()
{
	Downloadfile lib-web/geoip/GeoIP.tar.gz GeoIP-1.4.8
	autoreconf -ivf
	./configure
	make
	make install
}

env_Geoip2Install()
{
	mkdir -p /usr/local/share/GeoIP
	Downloadfile lib-web/geoip/GeoLite2-City.mmdb.zip ./
	Downloadfile lib-web/geoip/GeoLite2-Country.mmdb.zip ./
	mv -f GeoLite2-City.mmdb /usr/local/share/GeoIP/
	mv -f GeoLite2-Country.mmdb /usr/local/share/GeoIP/
	git clone --recursive https://github.com/maxmind/libmaxminddb
	cd libmaxminddb
	./bootstrap
	./configure
	make check
	make install
	ldconfig
}

env_NodeInstall()
{
	Downloadfile lib-web/node/${node_dir}.tar.gz
	sed -i '1s/python/python2.7/1' ./configure  ##########CentOS 5#########
	./configure --prefix=/mtimer/server/node
	make
	make install

	export PATH=$PATH:/mtimer/server/node/bin
}

env_NodechatInstall()
{
	# Nodechat聊天模块需要，一般用户不需要
	npm install express -gd
	npm install forever -gd
	npm install forever-webui -g
	npm install node-gyp -g
	npm install socket.io -g
	npm install hiredis redis -g
	npm install mysql@2.0.0-alpha8 -g
}

env_RedisInstall()
{
	Downloadfile lib-web/redis/${redis_dir}.tar.gz
	make
	make install
	cp -f ${MCONF_PATH}/redis/redis.conf  /etc/
	cp -f ${MINIT_PATH}/${DETECT_OS}/redis /etc/init.d/
	chmod +x /etc/init.d/redis
	DoInit add redis
	service redis start
}

env_CmakeInstall()
{
	Downloadfile lib-web/cmake/${cmake_dir}.tar.gz
	./bootstrap
	make
	make install
}

env_BisonInstall()
{
	Downloadfile lib-web/bison/${bison_dir}.tar.gz
	./configure
	make
	make install
}

env_AprInstall()
{
	Downloadfile lib-web/apr/${apr_dir}.tar.gz
	sed -i 's/$RM "$cfgfile"/#$RM "$cfgfile"/g' ./configure
	./configure
	make
	make install
}

env_AprUtilInstall()
{
	Downloadfile lib-web/apr/${apr_util_dir}.tar.gz
	./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr
	make
	make install
}

env_AprIconvInstall()
{
	Downloadfile lib-web/apr/${apr_iconv_dir}.tar.gz
	./configure --prefix=/mtimer/server/httpd --with-apr=/usr/local/apr
	make
	make install
}

env_Re2cInstall()
{
	Downloadfile lib-web/re2c/${re2c_dir}.tar.gz
	./configure
	make
	make install
}

env_GccInstall()
{
	# 如果 gcc 版本低于 4.2,则无法安装 libmemcached 以及后面的 php memcached 扩展
	# 你可以按下面步骤自行安装 gcc >= 4.2 后补上, 但是很费时间
	Downloadfile lib-web/gcc/gcc-4.9.0.tar.bz2
	./contrib/download_prerequisites
	cd ..
	mkdir gcc-build-4.9.0
	cd  gcc-build-4.9.0
	../gcc-4.9.0/configure --prefix=/usr/local/gcc-4.9.0 --enable-checking=release --enable-languages=c,c++ --disable-multilib
	make -j4
	make install
	cat >> ~/.bashrc <<-EOF
	GCCHOME=/usr/local/gcc-4.9.0
	PATH=$GCCHOME/bin:$PATH
	LD_LIBRARY_PATH=$GCCHOME/lib
	export GCCHOME PATH LD_LIBRARY_PATH
	EOF
}

env_LibmemcachedInstall()
{
	gccv1=$(gcc -dumpversion | cut -f1 -d'.')
	gccv2=$(gcc -dumpversion | cut -f2 -d'.')
	if [ "$gccv1" = "4" ] && [ $gccv2 -gt 1 ]; then
		Downloadfile lib-web/libmemcached/${libmemcached_dir}.tar.gz
		./configure
		make
		make install
	else
		: #env_GccInstall
	fi
}

env_SqlfixInstall()
{
	# sqlit fix
	cd ${MEXTRA_PATH}
	gcc -o lemon lemon.c
	mv lemon /usr/local/bin/
}

env_Install()
{
	os_install="$(mtenv $DETECT_OS EnvInstall)"
	env_LibiconvInstall
	env_LibmcryptInstall
	env_MhashInstall
	env_McryptInstall
	env_ZlibInstall
	env_PcreInstall
	env_OpensslInstall
	env_WgetInstall
	env_CurlInstall
	env_OpensshInstall
	env_LibjpegInstall
	env_LibpngInstall
	env_FreetypeInstall
	env_LibeventInstall
	env_MemcachedInstall
	env_LibgdInstall
	env_ImageMagickInstall
	env_PythonInstall
	env_AsciidocInstall
	env_GitInstall
	env_GeoipInstall
	env_Geoip2Install

	#if [ "$MTEnvLicense" = "yes" ] ; then
	#	env_NodeInstall
	#	env_NodechatInstall
	#	env_RedisInstall
	#fi

	# 安装 MYSQL 或 MariaDB 高版本才需要
	if [ "$SQLTODO" -gt "1" ]; then
		env_CmakeInstall
		env_BisonInstall
	fi

	# 安装 Apache 2.4.X 时需要
	if [ "$APACHETODO" == "4" ]; then
		env_AprInstall
		env_AprUtilInstall
		env_AprIconvInstall
	fi

	env_Re2cInstall
	env_LibmemcachedInstall
	env_SqlfixInstall
}

command="$1"
subcommand="$2"
env_Verify
env_Ldconfig
if [ "$subcommand" = "--debug" ] || [ "$subcommand" = "--dev" ]; then
	env_$command
else
	case "$command" in
		"Install" )
			env_$command
			;;
		* )
			exec mtenv help env
			;;
	esac
fi